from fontTools.ttLib import TTFontdef merge_fonts(font_files, output_file):    # Создаем пустой новый шрифт    merged_font = TTFont()    # Список для всех глифов    all_glyphs = set()    for font_file in font_files:        font = TTFont(font_file)        # Копируем только таблицы, которые содержат данные        for table in font.keys():            if table not in merged_font:                merged_font[table] = font[table]            else:                # Для таблицы 'glyf' (глифы) нужно аккуратно объединить глифы                if table == 'glyf':                    merged_font[table].glyphs.update(font[table].glyphs)                    all_glyphs.update(font[table].glyphs.keys())  # Сохраняем все имена глифов                # Для таблицы 'cmap' аккуратно объединяем подтаблицы                elif table == 'cmap':                    # Создаем список для всех подтаблиц cmap                    merged_subtables = []                    for subtable in font[table].tables:                        merged_subtables.append(subtable)                    # Добавляем подтаблицы без сортировки                    merged_font[table].tables = merged_subtables                else:                    # Для других таблиц можно просто перезаписать их данные                    merged_font[table] = font[table]    # Обновляем таблицу 'post' (порядок глифов)    if 'post' in merged_font:        merged_font['post'].glyphOrder = list(all_glyphs)    # Перегенерируем таблицу 'maxp' (максимальные параметры шрифта), если она есть    if 'maxp' in merged_font:        merged_font['maxp'].recalc(merged_font)    # Сохраняем новый шрифт в файл    merged_font.save(output_file)# Пример использования:font_files = ['DejaVuBold.ttf', 'DejaVuSerifCondensedBold.ttf', 'DejaVuSerifCondensedRegular.ttf',              'DejaVuSerifRegular.ttf']output_file = 'merged_font.ttf'merge_fonts(font_files, output_file)